=======
JSONRPC
=======


JSON-RPC server
---------------

The JSON server looks for content-type "application/json", and handles those
requests as JSON-RPC. The official mime-type for JSON is "application/json"
The old content type ``application/json-rpc`` is supported too.

Let's define a content object:

  >>> import zope.interface
  >>> class IDemoContent(zope.interface.Interface):
  ...     """Demo content interface."""

  >>> import persistent
  >>> class DemoContent(persistent.Persistent):
  ...     """Demo content."""
  ...     zope.interface.implements(IDemoContent)

And define a JSONRPC method view:

  >>> class Conflict(Exception):
  ...     pass
  >>> from zope.publisher.interfaces import Retry

  >>> from z3c.jsonrpc import publisher
  >>> import sys
  >>> class DemoView(publisher.MethodPublisher):
  ...     """Sample JSON view."""
  ...
  ...     def fail(self):
  ...         try:
  ...             raise Conflict
  ...         except:
  ...             raise Retry(sys.exc_info())

Make them available under the fake package ``jsonsamples``:

  >>> import sys
  >>> sys.modules['custom'] = type('Module', (), {})()
  >>> sys.modules['custom'].IDemoContent = IDemoContent
  >>> sys.modules['custom'].DemoContent = DemoContent
  >>> sys.modules['custom'].DemoView = DemoView

Let's show how we can register a jsonrpc view:

  >>> from zope.configuration import xmlconfig
  >>> import z3c.jsonrpc
  >>> context = xmlconfig.file('meta.zcml', z3c.jsonrpc)
  >>> context = xmlconfig.string("""
  ... <configure
  ...     xmlns:z3c="http://namespaces.zope.org/z3c">
  ...   <z3c:jsonrpc
  ...       for="custom.IDemoContent"
  ...       class="custom.DemoView"
  ...       permission="zope.Public"
  ...       methods="fail"
  ...       layer="z3c.jsonrpc.testing.IJSONRPCTestSkin"
  ...       />
  ... </configure>
  ... """, context)

Now we will setup a content object in our site:

  >>> site  = getRootFolder()
  >>> content = DemoContent()
  >>> site['content'] = content

  >>> siteURL = 'http://localhost/++skin++JSONRPCTestSkin'

Now we can call the method from our JSONRPC view:

  >>> from z3c.jsonrpc import testing
  >>> request = testing.TestRequest()
  >>> demoView = DemoView(content, request)
  >>> demoView.fail()
  Traceback (most recent call last):
  ...
  Retry: None


JSON-RPC proxy
--------------

The jsonrpc package provides also a JSON-RPC proxy implementation. This
implementation is similar to the one known from xmlrpclib except that it can
handle JSON instead of XML.

Let's try to call our method called ``hello`` we defined before:

  >>> from z3c.jsonrpc.testing import JSONRPCTestProxy
  >>> proxy = JSONRPCTestProxy(siteURL + '/content')
  >>> proxy.fail()
  u'Hello World'



cleanup
-------

Now we need to clean up the custom module.

  >>> del sys.modules['custom']
